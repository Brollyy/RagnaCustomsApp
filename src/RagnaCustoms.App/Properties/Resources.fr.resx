<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Command.Base.Action.Message" xml:space="preserve">
    <value>Vous pouvez demander des musiques à {0} avec la commande !rc [map_id], pour les trouver, allez sur https://ragnacustoms.com et cliquez sur le bouton twitch (le violet) pour copier la commande !rc [map_id] et revenez ici pour coller la commande.</value>
  </data>
  <data name="Command.Cancel.Help" xml:space="preserve">
    <value>Retire votre dernière requete</value>
  </data>
  <data name="Command.Base.Help" xml:space="preserve">
    <value>Explique comment faire une demande au streamer</value>
  </data>
  <data name="Command.Cancel.Action.Canceled" xml:space="preserve">
    <value>Musique anulée</value>
  </data>
  <data name="Command.Cancel.Action.NoSongToCancel" xml:space="preserve">
    <value>Pas d'autre musique à retirer</value>
  </data>
  <data name="Command.Help.Action.Cmd" xml:space="preserve">
    <value>Commande</value>
  </data>
  <data name="Command.Help.Action.CommandList" xml:space="preserve">
    <value>Liste des commandes</value>
  </data>
  <data name="Command.Help.Action.OthersCommand" xml:space="preserve">
    <value>Pour voir la description complete d'une commande utiliser "!rc help [nom_de_la_commande]"</value>
  </data>
  <data name="Command.Help.Action.UnknowCommand" xml:space="preserve">
    <value>Cette commande n'existe pas, vérifiez le nom de la commande.</value>
  </data>
  <data name="Command.Help.Help" xml:space="preserve">
    <value>Affiche la liste des commandes</value>
  </data>
  <data name="Program.Api.Message1" xml:space="preserve">
    <value>Attention, la clé API est manquante.\r\nRendez vous dans Outils &gt; Système de score &gt; Configurer la clé Api...</value>
  </data>
  <data name="Program.Api.Message1_Title" xml:space="preserve">
    <value>La clé API est manquante</value>
  </data>
  <data name="Program.Api.Set_api_key" xml:space="preserve">
    <value>Entrez votre clé Api : </value>
  </data>
  <data name="TwitchBot.Form.Title" xml:space="preserve">
    <value>Requêtes Twitch bot</value>
  </data>
  <data name="TwitchBot.Form.Enabled" xml:space="preserve">
    <value>Activé ?</value>
  </data>
  <data name="TwitchBot.Form.AutoStart" xml:space="preserve">
    <value>Auto-start ?</value>
  </data>
  <data name="TwitchBot.Form.Author" xml:space="preserve">
    <value>Auteur</value>
  </data>
  <data name="TwitchBot.Form.BotMessagePrefix" xml:space="preserve">
    <value>Préfixe des messages</value>
  </data>
  <data name="TwitchBot.Form.Commands" xml:space="preserve">
    <value>Commandes</value>
  </data>
  <data name="TwitchBot.Form.GetToken" xml:space="preserve">
    <value>Récupérez votre Token sur :</value>
  </data>
  <data name="TwitchBot.Form.ManagebaseCommands" xml:space="preserve">
    <value>Gérer les commandes perso.</value>
  </data>
  <data name="TwitchBot.Form.ManageCustomCommands" xml:space="preserve">
    <value>Férer les commandes de base</value>
  </data>
  <data name="TwitchBot.Form.Song" xml:space="preserve">
    <value>Musique</value>
  </data>
  <data name="TwitchBot.Form.TMI" xml:space="preserve">
    <value>TMI OAuth</value>
  </data>
  <data name="TwitchBot.Form.TwitchChannel" xml:space="preserve">
    <value>Nom chaine Twitch</value>
  </data>
  <data name="TwitchBot.Form.Viewer" xml:space="preserve">
    <value>Viewer</value>
  </data>
  <data name="TwitchBot.Form.withoutHttp" xml:space="preserve">
    <value>Sans https://twitch.tv</value>
  </data>
  <data name="TwitchBot.Form.Configuration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="Song.Form.NeedToSetYourApiKeyFirst" xml:space="preserve">
    <value>Vous devez d'abord définir votre clé API</value>
  </data>
  <data name="Song.Form.EnterYourApiKey" xml:space="preserve">
    <value>Entez votre clé API :</value>
  </data>
  <data name="Song.Form.NoCompatibleDeviceFound" xml:space="preserve">
    <value>Aucun appareil compatible trouvé</value>
  </data>
  <data name="Song.Form.found" xml:space="preserve">
    <value>{0} {1} trouvé</value>
  </data>
  <data name="Song.Form.SyncComplete" xml:space="preserve">
    <value>Synchronisation terminée</value>
  </data>
  <data name="Song.Form.Tools" xml:space="preserve">
    <value>Outils</value>
  </data>
  <data name="Song.Form.Search" xml:space="preserve">
    <value>Chercher</value>
  </data>
  <data name="Song.Form.Exit" xml:space="preserve">
    <value>Quitter</value>
  </data>
  <data name="Song.Form.File" xml:space="preserve">
    <value>Fichier</value>
  </data>
  <data name="Song.Form.About" xml:space="preserve">
    <value>A propos</value>
  </data>
  <data name="Song.Form.Author" xml:space="preserve">
    <value>Auteur</value>
  </data>
  <data name="Song.Form.AutoCloseDownload" xml:space="preserve">
    <value>Fermeture auto. des téléchargements</value>
  </data>
  <data name="Song.Form.CheckAccess" xml:space="preserve">
    <value>Verification de l'accès</value>
  </data>
  <data name="Song.Form.ConfigureApiKey" xml:space="preserve">
    <value>Configurer la clé API...</value>
  </data>
  <data name="Song.Form.Difficulties" xml:space="preserve">
    <value>Difficultés</value>
  </data>
  <data name="Song.Form.EnableOverlay" xml:space="preserve">
    <value>Activer l'overlay</value>
  </data>
  <data name="Song.Form.getOverlayurl" xml:space="preserve">
    <value>Accéder à l'URL de l'overlay</value>
  </data>
  <data name="Song.Form.Help" xml:space="preserve">
    <value>Aide</value>
  </data>
  <data name="Song.Form.Language" xml:space="preserve">
    <value>Langue</value>
  </data>
  <data name="Song.Form.LogFile" xml:space="preserve">
    <value>Fichier de log</value>
  </data>
  <data name="Song.Form.LogScreen" xml:space="preserve">
    <value>Ecran de log</value>
  </data>
  <data name="Song.Form.Mapper" xml:space="preserve">
    <value>Mapper</value>
  </data>
  <data name="Song.Form.Name" xml:space="preserve">
    <value>Nom</value>
  </data>
  <data name="Song.Form.Quest" xml:space="preserve">
    <value>Quest</value>
  </data>
  <data name="Song.Form.ScoreSystem" xml:space="preserve">
    <value>Système de score</value>
  </data>
  <data name="Song.Form.SendScoreAutomatically" xml:space="preserve">
    <value>Envoyer le score automatiquement</value>
  </data>
  <data name="Song.Form.Settings" xml:space="preserve">
    <value>Paramètres</value>
  </data>
  <data name="Song.Form.Streaming" xml:space="preserve">
    <value>Streaming</value>
  </data>
  <data name="Song.Form.SyncSong" xml:space="preserve">
    <value>Synchro. des musiques</value>
  </data>
  <data name="Song.Form.TwitchBot" xml:space="preserve">
    <value>Twitch bot</value>
  </data>
  <data name="Song.Form.CompareSongversion" xml:space="preserve">
    <value>Comparer les versions des musiques</value>
  </data>
  <data name="Song.Form.CompatibleDeviceFound" xml:space="preserve">
    <value>Equipement trouvé : {0} {1}</value>
  </data>
</root>